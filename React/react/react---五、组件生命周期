组件的生命周期可分成三个状态：

  Mounting：已插入真实 DOM
  Updating：正在被重新渲染
  Unmounting：已移出真实 DOM
  
生命周期的方法：
  componentWillMount：在渲染前调用,在客户端也在服务端。
  
  componentDidMount：在第一次渲染后调用，只在客户端。之后组件已经生成了对应的DOM结构，可以通过this.getDOMNode()来进行访问。 如果你想和其他
                     JavaScript框架一起使用，可以在这个方法中调用setTimeout, setInterval或者发送AJAX请求等操作(防止异部操作阻塞UI)。
  
  componentWillReceiveProps：在组件接收到一个新的prop时被调用。这个方法在初始化render时不会被调用。
  
  shouldComponentUpdate：返回一个布尔值。在组件接收到新的props或者state时被调用。在初始化时或者使用forceUpdate时不被调用。可以在你确认不需要更新
                         组件时使用。
  
  componentWillUpdate：在组件接收到新的props或者state但还没有render时被调用。在初始化时不会被调用。
  
  componentDidUpdate：在组件完成更新后立即调用。在初始化时不会被调用。
  
  componentWillUnmount：在组件从 DOM 中移除的时候立刻被调用。
  

例子来啦：  
var Hello = React.createClass({
  getInitialState: function () {
    return {
      opacity: 1.0
    };
  },

  componentDidMount: function () {
    this.timer = setInterval(function () {
      var opacity = this.state.opacity;
      opacity -= .05;
      if (opacity < 0.1) {
        opacity = 1.0;
      }
      this.setState({
        opacity: opacity
      });
    }.bind(this), 100);
  },

  render: function () {
    return (
      <div style={{opacity: this.state.opacity}}>
        Hello {this.props.name}
      </div>
    );
  }
});

ReactDOM.render(
  <Hello name="world"/>,
  document.body
);
上面代码在hello组件加载以后，通过 componentDidMount 方法设置一个定时器，每隔100毫秒，就重新设置组件的透明度，从而引发重新渲染。


  
  

